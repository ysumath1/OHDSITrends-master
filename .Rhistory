set.seed(1e9)
sample(letters, 1:3)
sample(letters, 3)
sample(letters, 3)
set.seed(1e9)
sample(letters, 3)
sample(letters, 3)
sample(1:e8, 1)
sample(1:1e8, 1)
sample(1:1e6, 1)
26*26*26
26*26*26*26
26^7
1e6/26
26^5
26^4
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
install.packages('DatabaseConnector')
install.packages("drat")
drat::addRepo("OHDSI")
install.packages("DatabaseConnector")
drat::addRepo("OHDSI")
install.packages("DatabaseConnector")
library(devtools)
install_github("ohdsi/SqlRender")
install.packages('rJava')
library(devtools)
install_github("ohdsi/SqlRender")
install.packages('rJava')
install.packages(rJava)
install.packages('rJava')
install.packages('rJava')
install_github("ohdsi/SqlRender")
devtools::install_github("ohdsi/SqlRender")
--request
get.extFiles <- function(fnames, ext)
{
return(fnames[endsWith(fnames, ext)])
}
#' @description get the files that match the descriptor (e.g.3rd word in export
#' file naming convention)
#' @param descriptor Description value (case sensitive)
#' @param descriptor_index word position in export file name
#' @param delim deliminator in export file name (usually '_')
#' @export
sepExportFiles <- function(files, descriptor, descriptor_index = 3, delim = '_')
{
sss <- strsplit(files, delim) %>% data.frame()
colnames(sss) = 1:ncol(sss)
cols <- which(sss[descriptor_index,] == descriptor)
sss2 <- sss[,cols]
x <- NULL
for(i in 1:ncol(sss2))
x %<>% append(sss2[[i]] %>% as.character() %>% paste(collapse = delim))
return(x)
}
extractFromFileName <- function(file, index, delim = '_')
{
sss <- strsplit(file, delim) %>% data.frame()
colnames(sss) = 1:ncol(sss)
return(sss[index,1] %>% as.character())
}
#' @description read all myfiles and return 1 df that rbinds them all together
#' @param myfiles filename with extension of csv files to read
#' @param folder folder where the files are (folder must have '/' character)
#' @export
read_and_rbind_csv_files <- function(myfiles, folder)
{
out <- NULL
path <- paste0(folder, myfiles)
for(p in path) out %<>% rbind(readr::read_csv(p))
return(out)
}
#' @description Reads all the files in each analysis_id sub folder inside the export folder. Then does the central processing
#' for this one folder, and writes its outputs in the specified outFolder.
#'
#' @export
analyzeOneFileType <- function(sub_folder, fType, outFolder)
{
fnames  <- dir(sub_folder)
files <- get.extFiles(fnames, '.csv')
myfiles <- sepExportFiles(files, fType)
df <- read_and_rbind_csv_files(myfiles, sub_folder)
# at decile level
df_all2 <- df %>% dplyr::group_by(stratum_1, concept_name, decile) %>%
dplyr::summarise(n = n(), quant_consistency = decile_classification2(score),
qual_consistency = qualitative_consistency(score, n)) %>%
dplyr::filter(n > 1)
# at event level
df_all1 <- df %>% dplyr::group_by(stratum_1, concept_name) %>%
dplyr::summarise(n = n(), quant_consistency = decile_classification2(score),
qual_consistency = qualitative_consistency(score, n)) %>%
dplyr::filter(n > 1)
# to write filenames, I need the analysis_id and db_schema
fname1 <- myfiles[1]
analysis_id <- extractFromFileName(fname1, 1) %>% as.integer()
db_schema <- extractFromFileName(fname1, 2)
site_name <- substr(db_schema, 1, 3)
out_fname1 <- paste(analysis_id, site_name, fType, ';events.csv', sep = '_')
readr::write_csv(df_all1, path = paste0(outFolder, out_fname1))
out_fname2 <- paste(analysis_id, site_name, fType, ';events_by_decile.csv', sep = '_')
readr::write_csv(df_all2, path = paste0(outFolder, out_fname2))
}
#' @description This function does all the Central Processing of files
#'
#' @param exportFolder unzipped exportFolder. Check that file hierarchy is what we expect; if user ran OHDSITrends
#' function from the top, we should be good to go
#'
#' @param processingFolder Destination centralized Processing Folder (will be created if it doesn't exist yet)
#'
#' @export
Central_Processing <- function(exportFolder, processingFolder)
{
if(!dir.exists(processingFolder)) dir.create(processingFolder)
subs <- dir(exportFolder)
subfolders <- paste0(exportFolder, subs, '/')
for(i in 1:length(subfolders))
{
sub_folder <- subfolders[i]
outFolder <- paste0(processingFolder, subs[i], '/')
if(!dir.exists(outFolder)) dir.create(outFolder)
analyzeOneFileType(sub_folder, 'Overall', outFolder)
analyzeOneFileType(sub_folder, 'Top', outFolder)
}
}
#' @description uses exponential decay function with standard deviation of classification score
#' to evalute consistency. If consistency is < 36, then there are at least a few deciles that have a trend
#' strongly counter to the general trend of the medical event.
#'
#' @export
decile_classification2 <- function(x)
{
#Put consistency score on a -100ish to 100 scale
#end = (sign(min(x)) == 0 | sign(max(x)) == 0)
std <- sd(x)
if(is.na(std)|is.nan(std)) return(0)
else if(std <= 1)
{
if(sign(mean(x)) != -sign(Mode(x))) return(trunc(exp(-sd(x)) * 100))
else return(trunc(exp(-sd(x)) * -100))
}
else if(T)
{
if(sign(mean(x)) != -sign(Mode(x))) return(trunc(exp(1-sd(x)) * 36))
else  return(trunc(exp(1-sd(x)) * -36))
}
}
#'
#'  @description Qualitative consistency. This calculates the percent difference between
#' the number of deciles that are rising and sinking. 100 means all deciles are rising or sinking.
#' 0 means there as equal numbers of rising and sinking deciles.
#' @param x score
#' @param n number of deciles
#' @export
qualitative_consistency <- function(x, n)
{
ris <- sum(x > 0)
sin <- sum(x < 0)
return(trunc(abs(ris-sin)/n * 100))
}
#'
#' @description Determines consistency based on whether n deciles are rising or sinking. Returns 1
#' if n deciles are rising/sinking; 0 otherwise
#' @param x  score
#' @param n user-specified minimum number of deciles that are rising or sinking
#' @export
user_consistency <- function(x, n)
{
ris <- sum(x > 0)
sin <- sum(x < 0)
return(ifelse( ris >= n |sin >= n, 1, 0))
}
#' @description  Mode function
#' @export
Mode <- function(x, na.rm = T) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
library(magrittr)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
debug()
debug(analyzeOneFileType)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
5+5
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
fnames
sub_folder = 904 Results
sub_folder = '/Users/yohan/Desktop/Test 09.20/904 Results'
fnames  <- dir(sub_folder)
files <- get.extFiles(fnames, '.csv')
myfiles <- sepExportFiles(files, fType)
fType = 'Overall'
myfiles <- sepExportFiles(files, fType)
myfiles <- sepExportFiles(files, fType)
files <- get.extFiles(fnames, '.csv')
myfiles <- sepExportFiles(files, fType)
sss <- strsplit(files, delim) %>% data.frame()
delim = '_'
sss <- strsplit(files, delim) %>% data.frame()
strsplit(files, '_')
sss <- strsplit(files, delim) %>% data.frame()
install.packages('rJava')
install.packages('rJava', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(rJava)
library(magrittr)
install.packages('rJava')
install.packages("https://github.com/jeremiedb/mxnet_winbin/raw/master/mxnet.zip", repos = NULL)
install.packages("rJava",,"http://rforge.net", type = 'source')
install.packages('rJava')
library(rJava)
library(rJava)
library(rJAva)
library(rJava)
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
library(rJava)
library(rJava)
install.packages("SqlRender")
library(SqlRender)
install.packages("drat")
drat::addRepo("OHDSI")
install.packages("DatabaseConnector")
library(DatabaseConnector)
document()
library(devtools)
document()
library(OHDSITrends)
?OHDSITrends
?lmp
document()
?sepExportFiles
document()
?decile_classification2
library(roxygen2)
roxygenise()
library(OHDSITrends)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
sub_folder <- '/Users/yohan/Desktop/Test 09.20/904 Results'
fname <- dir(sub_folder)
fname
fnames = fname; rm(fname)
endsWith(fnames, "data.csv")
fnames[endsWith(fnames, "data.csv")]
myfiles <- fnames[endsWith(fnames, "data.csv")]
document()
library(OHDSITrends)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results', '/Users/yohan/Desktop/untitled folder')
sepExportFiles
analyzeOneFileType
myfiles <- sepExportFiles(files, fType)
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
myfiles <- sepExportFiles(files, "Overall")
myfiles
df <- read_and_rbind_csv_files(myfiles, sub_folder)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results/', '/Users/yohan/Desktop/untitled folder/')
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results/', '/Users/yohan/Desktop/untitled folder/')
q
document()
library(OHDSITrends)
Central_Processing('/Users/yohan/Desktop/Test 09.20/904 Results/', '/Users/yohan/Desktop/untitled folder/')
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
analyzeOneFileType('/Users/yohan/Desktop/Test 09.20/904 Results/', 'Overall', '/Users/yohan/Desktop/untitled folder/')
df <- read_and_rbind_csv_files(myfiles, sub_folder)
analyzeOneFileType('/Users/yohan/Desktop/Test 09.20/904 Results/', 'Overall', '/Users/yohan/Desktop/untitled folder/')
analyzeOneFileType(sub_folder, 'Overall', '/Users/yohan/Desktop/untitled folder/')
sub_folder <- 'Users/yohan/Desktop/Test 09.20/904 Results/'
analyzeOneFileType(sub_folder, 'Overall', '/Users/yohan/Desktop/untitled folder/')
sub_folder <- 'Users/yohan/Desktop/Test 09.20/904 Results/'
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
fType
fType = 'Overall'
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
fType
files
fnames  <- dir(sub_folder)
fnames
sub_folder
fnames  <- dir(sub_folder)
fnames
sub_folder <- 'Users/yohan/Desktop/Test 09.20/904 Results'
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
fnames  <- dir(sub_folder)
fnames
sub_folder <- 'Users/yohan/Desktop/Test 09.20/904 Results'
fnames  <- dir(sub_folder)
fnames
sub_folder <- '/Users/yohan/Desktop/Test 09.20/904 Results'
fnames  <- dir(sub_folder)
fnames
sub_folder <- '/Users/yohan/Desktop/Test 09.20/904 Results/'
fnames  <- dir(sub_folder)
fnames
analyzeOneFileType(sub_folder, fType, '/Users/yohan/Desktop/untitled folder/')
fnames  <- dir(sub_folder)
files <- fnames[endsWith(fnames, "data.csv")]
myfiles <- sepExportFiles(files, fType)
df <- read_and_rbind_csv_files(myfiles, sub_folder)
View(df)
100*12*3
100*120*3
1080/120
11*12
9*12
120*100*2 + 108*100
analyzeOneFileType(sub_folder, fType, '/Users/yohan/Desktop/untitled folder/')
colnames(df)
View(df)
document()
library(OHDSITrends)
analyzeOneFileType(sub_folder, fType, '/Users/yohan/Desktop/untitled folder/')
Central_Processing('/Users/yohan/Desktop/Test 09.20/', '/Users/yohan/Desktop/untitled folder/')
document()
library(OHDSITrends)
?OHDSITrends
document()
library(OHDSITrends)
?OHDSITrends
roxygenize()
roxygenize()
document()
warnings()
error90
warnings()
errors()
error()
26^3
fname <- system.file("kb-drug_era3.csv", "csv", package = "OHDSITrends")
readr::read_csv(fname)
fname <- system.file("csv", "kb-drug_era3.csv", package = "OHDSITrends")
fname
readr::read_csv(fname)
library(OHDSITrends)
fname <- system.file("csv", "kb-drug_era3.csv", package = "OHDSITrends")
fname
?system.file
find.package('OHDSITrends')
devtools::install_github('ohdsi/StudyProtocolSandbox/OHDSITrends')
system.file("csv", "kb-drug_era3.csv", package = "OHDSITrends")
readr::read_csv(system.file("csv", "kb-drug_era3.csv", package = "OHDSITrends"))
